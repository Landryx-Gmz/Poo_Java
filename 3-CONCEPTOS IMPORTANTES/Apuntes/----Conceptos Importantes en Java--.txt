                                                               ----Conceptos Importantes en Java----

Excepciones en Java
En Java, una excepción es un evento o condición inusual que ocurre durante la ejecución de un programa y que interrumpe el flujo normal de ejecución. Las excepciones se utilizan para manejar y señalar errores y situaciones excepcionales.

Muchas cosas pueden causar excepciones, entre ellas:

Errores de hardware
Operaciones matemáticas no posibles (Ej: dividir por cero)
Errores de programa (Ej: error de desbordamiento de un arreglo)
Apertura de un archivo inexistente
Entre otras…
Tipos de Excepciones
Hay dos tipos bien diferenciados:

Propias de Java como lenguaje
Personalizadas
Propias de Java
Entre las propias de Java podemos encontrarnos con las siguientes:


Aquí hay una lista de algunas de las excepciones propias de Java más comunes:

ArithmeticException: Se lanza cuando ocurre un error aritmético, como la división por cero.
ArrayIndexOutOfBoundsException: Se lanza cuando se intenta acceder a un índice fuera de los límites de un array.
ArrayStoreException: Se lanza cuando se intenta almacenar un tipo de objeto incompatible en un array de objetos.
ClassCastException: Se lanza cuando se intenta convertir un objeto a una subclase de la que no es una instancia.
IllegalArgumentException: Se lanza cuando un método recibe un argumento inapropiado.
NumberFormatException: Una subclase de IllegalArgumentException, lanzada cuando un intento de conversión de cadena a número falla.
IllegalStateException: Se lanza cuando el entorno o estado de una operación no es adecuado para ejecutar la operación solicitada.
NullPointerException: Se lanza cuando un intento de usar una referencia de objeto que no tiene valor se realiza (es decir, la referencia es null).
NegativeArraySizeException: Se lanza si se intenta crear un array con un tamaño negativo.
IndexOutOfBoundsException: Se lanza cuando se intenta acceder a un índice fuera del rango de una lista, cadena o array.
StringIndexOutOfBoundsException: Se lanza si se intenta acceder a un índice fuera de los límites de una cadena.
UnsupportedOperationException: Se lanza cuando una operación específica no está soportada.
Estas son algunas de las excepciones no comprobadas más comunes. Es importante recordar que, aunque no es obligatorio manejarlas, es buena práctica hacerlo para evitar que la aplicación falle inesperadamente debido a errores no controlados. Además, los desarrolladores pueden crear sus propias excepciones no comprobadas extendiendo RuntimeException.


Cada una de ellas puede ser utilizada en diferentes situaciones, por ejemplo, FileNotFoundException cuando no se encuentra un archivo o ArrayIndexOutOfBoundsException cuando se intenta acceder a una posición fuera de un array.



--Personalizadas--
Para poder construir excepciones propias, hay que tener en cuenta los siguientes bloques:

try: Bloque donde puede ocurrir la excepción.
catch: Es como el “else” del try (se ejecuta al dispararse una excepción en el bloque try).
finally: Bloque de código que se ejecuta siempre (sin importar si hubieron errores o no).
throw: Lanzar una excepción cualquiera.
throws: Determinar qué excepciones puede lanzar un método.




---Relaciones entre Clases en Java---

En Java, las relaciones entre clases se establecen mediante conceptos de programación orientada a objetos, como la herencia, la composición y la asociación.

Estas relaciones permiten establecer conexiones y dependencias entre diferentes clases para modelar la estructura y el comportamiento de un sistema.

Anteriormente vimos cómo funciona la herencia, ahora pasemos a ver cómo son las relaciones 1 a 1, 1 a n y n a n entre clases.

Relación 1 a 1
Este tipo de relación se lleva a cabo mediante la creación de un objeto como atributo o variable de instancia dentro de una clase. En este tipo de relación, cada objeto de la primera clase tiene una referencia única y exclusiva a un objeto de la segunda clase, y viceversa. Por ejemplo:

//ejemplo relación 1 a 1 entre dos clases


public class ClaseA {

private int id;
private String nombre;
private ClaseB objetoB;

// …

}

Relación 1 a n
En programación orientada a objetos (POO), una relación uno a muchos implica que un objeto de una clase se relaciona con varios objetos de otra clase.

En este tipo de relación, un objeto de la primera clase puede tener referencias múltiples a objetos de la segunda clase, pero cada objeto de la segunda clase solo está asociado a un único objeto de la primera. Esto se logra generalmente mediante el uso de Collections, como ser por ejemplo List, ArrayList, LinkedList, Hash, etc.

Por ejemplo, supongamos que queremos relacionar la clase Compra con la clase Items, donde cada compra puede tener varios Items, lo haríamos de la siguiente manera:

//ejemplo relación 1 a n entre dos clases


public class Compra {

private int id;
private String nombre;
private List<Item> listaItems;

// …

}

Relación n a n
Una relación muchos a muchos (n a n) en Java con POO implica que múltiples objetos de una clase se pueden relacionar con múltiples objetos de otra y viceversa.

Esto generalmente se logra mediante el uso de Collections en «ambos lados» de las relaciones, es decir, en ambas clases que se quieren relacionar entre si, dado que recordemos que, las relaciones n a n no son ni más ni menos que dos relaciones 1 a n enfrentadas entre si.

Por otro lado, como generalmente las relaciones n a n luego también son mapeadas en bases de datos, existen casos en donde se puede aplicar la misma teoría que en base de datos, donde es posible la creación de una clase intermedia que agregue información extra a las relaciones existentes entre ambas clases. Sin embargo, en casos donde se usen ORMs (como por ejemplo JPA + Hibernate), no suele ser necesaria esta creación de clase intermedia ya que el mismo ORM (concepto que veremos en clases más adelante) se encarga de crear todo de forma automática.

Supongamos un ejemplo donde una clase Alumnos tiene una relación n a n con una clase Materia, donde muchos Alumnos pueden estar en muchas materias, y muchas materias pueden tener muchos alumnos:


//ejemplo relación n a n entre dos clases
//Clase Alumno

public class Alumno {

private int id;
private String nombreAlumno;
private List<Materia> listaMaterias;

// …

}

//ejemplo relación n a n entre dos clases
//Clase Materia

public class Materia{

private int id;
private String nombreMateria;
private List<Alumno> listaAlumnos;

// …

}



       --Conversiones entre Tipos de Datos--

En Java, podemos realizar conversiones entre diferentes tipos de datos utilizando diferentes técnicas y operadores.

A continuación, veamos algunas de las más comunes:

Conversión implícita (Casting implícito)
Java realiza conversiones implícitas cuando se asigna un valor de un tipo de dato más pequeño a un tipo de dato más grande, o cuando no hay pérdida de información. Por ejemplo:

int numeroInt = 10;
long numeroLong = numeroInt; // Conversión implícita de int a long

Conversión explícita (Casting explícito)
Java también permite conversiones explícitas, donde se realiza una conversión manualmente utilizando el operador de casting «(tipoDeDato)» .
Esto se utiliza cuando se necesita convertir un tipo de dato más grande a uno más pequeño, o cuando hay riesgo de pérdida de información. Por ejemplo:

double numeroDouble = 3.14;
int numeroInt = (int) numeroDouble; // Conversión explícita de double a int

Clases contenedoras (Clases Wrapper)
En Java, existen clases contenedoras para cada tipo de dato primitivo. Generalmente se diferncian por estar escritas con una letra mayúscula al principio de su nombre (por tratarse de clases especiales y no de un  tipo de dato común). Algunos ejemplos son: Integer, Double, Boolean, etc y proporcionan métodos para realizar conversiones entre tipos de datos primitivos y objetos. Por ejemplo:

String numeroString = «35»;
int numeroInt = Integer.parseInt(numeroString); // Conversión de String a int

double numeroDouble = 1.67;
String numeroString = Double.toString(numeroDouble); // Conversión de double a String

Es importante tener en cuenta que algunas conversiones pueden provocar pérdida de información o errores si los valores no se pueden ajustar dentro del rango o formato esperado. Es recomendable verificar los límites y realizar las conversiones de manera segura para evitar problemas en tiempo de ejecución. 




      ----ENUMS o enumeraciones----

Un enum (abreviatura de «enumeration») es un tipo de dato especial en Java que permite definir un grupo de constantes con nombres específicos. Cada constante en un enum es una instancia única de ese enum.

Los enums en Java son, básicamente, una forma de definir un conjunto fijo de constantes, como los días de la semana, los meses del año, o los estados de un semáforo.

¿Por qué se usan?
Se usan para representar valores que no cambian. Por ejemplo, si estás trabajando con los días de la semana, puedes definir un enum que contenga todos los días: Lunes, Martes, Miércoles, etc. Así, puedes asegurarte de que las únicas opciones válidas para un día de la semana sean estas y que no haya posibilidad de que se ingresen otras.

Sintaxis básica
La sintaxis básica para definir un enum es la siguiente:

public enum Dia {

LUNES, MARTES, MIERCOLES, JUEVES, VIERNES, SABADO, DOMINGO

}

ENUMS o enumeraciones
Un enum (abreviatura de «enumeration») es un tipo de dato especial en Java que permite definir un grupo de constantes con nombres específicos. Cada constante en un enum es una instancia única de ese enum.

Los enums en Java son, básicamente, una forma de definir un conjunto fijo de constantes, como los días de la semana, los meses del año, o los estados de un semáforo.

¿Por qué se usan?
Se usan para representar valores que no cambian. Por ejemplo, si estás trabajando con los días de la semana, puedes definir un enum que contenga todos los días: Lunes, Martes, Miércoles, etc. Así, puedes asegurarte de que las únicas opciones válidas para un día de la semana sean estas y que no haya posibilidad de que se ingresen otras.

Sintaxis básica
La sintaxis básica para definir un enum es la siguiente:

public enum Dia {

LUNES, MARTES, MIERCOLES, JUEVES, VIERNES, SABADO, DOMINGO

}



     ----Generics o Genéricos en Java----

Los genéricos en Java son una característica que permite definir clases, interfaces y métodos con tipos de datos parametrizados. Esto significa que se puede escribir código mas flexible y reutilizable, manteniendo al mismo tiempo la seguridad de tipos en tiempo de compilación.

Los genéricos fueron introducidos en Java con la versión 5.0 y su principal objetivo es proporcionar una manera de manejar objetos de diferentes tipos sin perder la seguridad y/o integridad de los tipos de datos.

Sintaxis Básicas

La sintaxis de los genéricos se basa en el uso de <T>, conde T es un tipo de parámetro que representa un tipo de dato genérico que podría ir en su lugar.

Creamos una clase caja donde queramos guardar contenido sin importar su tipo de dato:



public calss Caja {
 private T contenido:

 public void poner(T contenido) {
	this.contenido =contenido;
  }


 public T sacar() {
	return contenido;
  }
}


Luego desde el Main, hagamos uso de esta clase con diferentes tipos de contenido:

	caja cajaDeString = new Caja<>();
cajaDeString.poner("Hola");
String contenido = cajaDeString.sacar();


Caja CajaDeEnteros = new Caja<>();
CajaDeEnteros.poner(123);
Integer numero = cajaDeEnteros.sacar();	