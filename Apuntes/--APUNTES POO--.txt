                                                    --APUNTES POO--
(código para salida de consola limpia -q exec:java -Dexec.mainClass=Logica.poo.Poo)

CLASES
-¿Qué son las clases? ¿Cómo crear una?
Las clases son plantillas o moldes que nos permiten construir objetos. Es una de las principales formas de abstraer objetos de la vida real para utilizarlos en el mundo lógico en las aplicaciones Java que desarrollemos.

Por ejemplo: Si tuviéramos la clase auto, esta contendría las principales partes/elementos que tiene un auto para poder construirlo o representarlo a nivel lógico.

Todas las clases tienen las siguientes características o particularidades:

✅ Representan «entidades» del mundo real.
✅ Poseen atributos y métodos (ya veremos más adelante ambos conceptos).
✅ Para poder hacer uso de ellas, debemos crear «instancias» u «objetos» (conceptos que iremos profundizando de a poco).

-Atributos de una clase:

Los atributos son características que posee una clase. Son variables contenidas y establecidas por los objetos y normalmente cuentan con un tipo de dato asociado. 

Por ejemplo, supongamos que queremos armar una clase para un PetShop que represente a las Mascotas que podrían arribar al mismo. ¿Cuáles serían los atributos de ésta clase?

Mascota
*nombre
*especie
*raza
*color
*pelaje
*peso



METODOS:

¿Qué son los métodos? ¿Cómo crear uno?
Las operaciones o métodos son acciones contenidas en una clase y ayudar a definir el comportamiento de la misma, diciendo cuáles son las acciones que ésta puede hacer.

Dentro de un sistema, los métodos suelen estar representados como verbos en infinitivo y puede tener opcionalmente valores de entrada (Parámetros) y valores de salida (Retorno).

Existen métodos que pueden ser Procedimientos (no retornan un valor) o Funciones (retornan un valor de un tipo de dato en particular).


Valores de entrada o parámetros

Los parámetros son valores que pueden ser enviados en un método. Los métodos toma los parámetros como valores de entrada, y así puede realizar las acciones necesarias a partir de los mismos.

Todos los parámetros deben tener un tipo de dato asociado (como así también pueden haber parámetros vacíos).

Por ejemplo:
Auto
color String
encender()------>sin parámetro
acelerar(int)--->parámetro int la cantidad de 'km' a acelerar
frenar(int)----->parámetro int la cantidad de 'km'a bajar la velocidad


Valor de Salida o Retorno
La salida de un método es un valor en particular que el mismo retorna luego de haber realizado una serie de acciones o procesos. Los valores de entrada son datos, y los valores de salida son considerados  generalmente como información.

Todos los valores de salida deben tener un tipo de dato asociado. En los métodos, es posible retornar un único valor de salida y ésta acción se lleva a cabo mediante la palabra reservada return.

ENTRADA--->PROCESO--->SALIDA




--Métodos Constructores y Objetos:

En Java, los objetos son instancias de clases y se crean mediante la invocación de un método llamado constructor. Un objeto en programación es, generalmente, la representación lógica de un objeto en la vida real. Posee un estado(de acuerdo a sus atributos) y posee un comportamiento (realizan operaciones de acuerdo a sus métodos).

Un constructor es un método especial que se llama automáticamente cuando se crea un objeto de una clase.

Los constructores se utilizan para inicializar los atributos de un objeto cuando se crea. Cada clase puede tener uno o más constructores y cada constructor tiene un nombre idéntico al de la clase propiamente dicha.


--Getters y Setters:
En Java, los getters y setters son métodos utilizados para acceder y modificar los valores de los atributos de una clase de manera controlada y segura. Los getters se utilizan para obtener el valor de un atributo, mientras que los setters se utilizan para establecer o modificar el valor de un atributo.

En términos simples, los getters y setters permiten que los atributos de una clase se mantengan privados y no se puedan acceder directamente desde fuera de la clase.

Por buena practica se suelen agregar después de los métodos constructores Y antes de los métodos personalizados o métodos de comportamiento.

Propiedades de la POO
En Java, la Programación Orientada a Objetos (POO) se basa en cuatro conceptos fundamentales:

Abstracción
Herencia
Polimorfismo
Encapsulamiento
Veamos un poquito algunas características de cada uno de ellos:

Abstracción: La abstracción en la POO es el proceso de identificar y separar las características esenciales de un objeto de la vida real para representarlas de forma abstracta o lógica en un programa. En Java, esto se logra mediante la creación de clases y la definición de sus atributos y métodos.

Herencia: La herencia es un mecanismo en Java que permite que una clase herede propiedades y métodos de una clase padre/madre.

Polimorfismo: Etimológicamente podemos decir que significa Poli: Muchas, Morfismo: Formas. El polimorfismo en Java es la capacidad de un objeto para tomar muchas formas diferentes. 

Encapsulamiento: El encapsulamiento es un mecanismo que permite ocultar los detalles de implementación de un objeto y proporciona una interfaz pública para que otros objetos interactúen con él. 

Habiéndolas conocido un poco, veamos un poco más en detalle una de las más importantes y utilizadas a la hora de desarrollar con Java. ¡La herencia!



--Herencia:
En la programación orientada a objetos, la herencia es un concepto clave que permite a una clase adquirir los atributos y comportamientos de otra. 

La herencia nos permite reutilizar clases. Generalmente al utilizar herencia se crea una nueva clase que «hereda» o «extiende» métodos y atributos de una clase ya existente sin tener que reescribir el código asociado a esta última. Esta nueva clase es denominada generalmente como subclase o también clase hija y puede poseer atributos y métodos que no existan en la clase original. Por otro lado, la clase original es conocida como super clase o también clase padre/madre.

Al igual que la «herencia genética» en la vida real, donde los hijos heredamos ciertas características y comportamientos de nuestros padres, en la «herencia de programación» se cumple exactamente el mismo concepto. ¡Veamos un ejemplo!

ejemplo herencia java
Persona es una clase genérica que sirve para almacenar datos en común de todas las personas, como el nombre, la dirección, el número de teléfono, etc.


	--Persona--
	___________
	___________
	     ^ 	
--Empleado-- | --Consultor
____________<|>___________
____________   ___________


Empleado hereda estos mismos atributos de la clase Persona, pero puede incluir atributos propios, como por ejemplo, num de legajo, puesto, cargo, etc.

Consultor también hereda los mismos atributos en común de la clase persona, mientras que puede incluir otros atributos propios, como empresa Consultora, id de consultor, etc.

Al mismo tiempo, Empleado y Consultor son entre si clases hermanas. Al igual que en la vida real, ambas heredan las mismas características de s clase padre, sin embargo, ambas pueden poseer de igual manera atributos y métodos que sean propios y que las diferencia entre si.
